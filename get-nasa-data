#!/bin/bash

# Set some default values:
UNAME=
PWD=
URL=
MATCHES=
OUTPUT_DIR=

usage()
{
  echo "Usage: $0 { -u | --username } username for authentication
                     { -p | --password } password for authentication
                     { -l | --url } url to get files from
                     [ -m | --matches ] regex to match against filenames (ex. '*20200430*.nc4')
                     { -o | --output-dir } directory where files should be downloaded
                     [ -h | --help ] Prints this help"
  exit 2
}

spin()
{
  spinner="/|\\-/|\\-"
  while :
  do
    for i in `seq 0 7`
    do
      echo -n "${spinner:$i:1}"
      echo -en "\010"
      sleep 0.4
    done
  done
}

# Parse the arguments passed into the script
PARSED_ARGUMENTS=$(getopt -a -n $0 -o u:p:l:m:o:h --long username:,password:,url:,matches:,output-dir:,help -- "$@")
VALID_ARGUMENTS=$?
if [ "$VALID_ARGUMENTS" != "0" ]; then
  usage
fi

eval set -- "$PARSED_ARGUMENTS"
while :
do
  case "$1" in
    -u | --username)     UNAME="$2";        shift 2 ;;
    -p | --password)     PWD="$2";          shift 2 ;;
    -l | --url)          URL="$2";          shift 2 ;;
    -m | --matches)      MATCHES="$2";      shift 2 ;;
    -o | --output-dir)   OUTPUT_DIR="$2";   shift 2 ;;
    -h | --help)         usage;             shift   ;;
    # -- means the end of the arguments; drop this, and break out of the while loop
    --) shift; break ;;
    # If invalid options were passed, then getopt should have reported an error,
    # which we checked as VALID_ARGUMENTS when getopt was called...
    *) echo "Unexpected option: $1 - this should not happen."
       usage ;;
  esac
done

if test -z "$UNAME" -o -z "$PWD" -o -z "$OUTPUT_DIR" -o -z "$URL";
then usage;
fi

# Begin data collection
echo "machine urs.earthdata.nasa.gov login ${UNAME} password ${PWD}" > ~/.netrc
rm -f ~/.urs_cookies && touch ~/.urs_cookies

# MATCHES=$( date "${MATCHES}" ); echo ${MATCHES}

echo -en "Downloading files matching ${MATCHES} to ${OUTPUT_DIR}...  "
echo -e -n "\x1b[\x33 q"

# Start the Spinner:
spin &
# Make a note of its Process ID (PID):
SPIN_PID=$!
# Kill the spinner on any signal, including ^C
trap "kill -9 $SPIN_PID" `seq 0 15`

wget --load-cookies ~/.urs_cookies --save-cookies ~/.urs_cookies --auth-no-challenge=on --keep-session-cookies -np -r -nd -R "index.html*","*.xml" -A ${MATCHES} \
	--directory-prefix=${OUTPUT_DIR} --content-disposition ${URL} >> /tmp/data.log 2>&1
sleep 1
rm -f ${OUTPUT_DIR}/robots.txt*
# Change the cursor to a solid bar after data collection is over
echo -e -n "\x1b[\x32 q"
printf "\nFinished! Data log can be viewed at /tmp/data.log\n"

# Stop the spinner
kill -9 $SPIN_PID

